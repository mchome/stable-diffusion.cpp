name: CI

on:
  workflow_dispatch: # allows manual triggering
  push:
    branches:
      - master
    paths:
      [
        ".github/workflows/**",
        "**/CMakeLists.txt",
        "**/Makefile",
        "**/*.h",
        "**/*.hpp",
        "**/*.c",
        "**/*.cpp",
        "**/*.cu",
      ]
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      [
        "**/CMakeLists.txt",
        "**/Makefile",
        "**/*.h",
        "**/*.hpp",
        "**/*.c",
        "**/*.cpp",
        "**/*.cu",
      ]

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  windows-latest-cmake:
    runs-on: windows-latest

    env:
      VULKAN_VERSION: 1.3.261.1
      WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/b380d914-366b-4b77-a74a-05e3c38b3514/intel-oneapi-base-toolkit-2025.0.0.882_offline.exe
      WINDOWS_DPCPP_MKL: intel.oneapi.win.cpp-dpcpp-common:intel.oneapi.win.mkl.devel:intel.oneapi.win.dnnl:intel.oneapi.win.tbb.devel
      ONEAPI_ROOT: "C:/Program Files (x86)/Intel/oneAPI"

    strategy:
      matrix:
        include:
          - build: "avx2"
            defines: "-DGGML_AVX2=ON"
          - build: 'vulkan'
            defines: "-DSD_VULKAN=ON -DSD_BUILD_SHARED_LIBS=ON"
          - build: 'sycl'
            defines: "-DSD_SYCL=ON -DGGML_SYCL_F16=ON -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=icx -DCMAKE_BUILD_TYPE=Release"
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Install oneapi
        if: matrix.build == 'sycl'
        shell: cmd
        run:  |
          set URL=${{ env.WINDOWS_BASEKIT_URL }}
          set COMPONENTS=${{ env.WINDOWS_DPCPP_MKL }}

          curl.exe --output %TEMP%\webimage.exe --url %URL% --retry 5 --retry-delay 5
          start /b /wait %TEMP%\webimage.exe -s -x -f webimage_extracted --log extract.log
          del %TEMP%\webimage.exe
          if "%COMPONENTS%"=="" (
            webimage_extracted\bootstrapper.exe -s --action install --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=.
          ) else (
            webimage_extracted\bootstrapper.exe -s --action install --components=%COMPONENTS% --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=.
          )
          set installer_exit_code=%ERRORLEVEL%
          rd /s/q "webimage_extracted"
          exit /b %installer_exit_code%

      - name: Install Vulkan SDK
        id: get_vulkan
        if: matrix.build == 'vulkan'
        uses: humbletim/install-vulkan-sdk@main
        with:
          version: ${{ env.VULKAN_VERSION }}
          cache: true   

      - name: Build
        id: cmake_build
        shell: cmd
        run: |
          mkdir build
          cd build
          if "${{ matrix.build }}" == "sycl" (
            @call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" intel64 --force
            cmake .. -G "Ninja" ${{ matrix.defines }}
          )
          else (
            cmake .. ${{ matrix.defines }}
          )
          cmake --build . --config Release -j

      - name: Get commit hash
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Build the release package
        if: matrix.build == 'sycl'
        id: pack_artifacts
        shell: bash
        run: |
          echo "cp oneAPI running time dll files in ${{ env.ONEAPI_ROOT }} to ./build/bin"

          cp "${{ env.ONEAPI_ROOT }}/mkl/latest/bin/mkl_sycl_blas.5.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/mkl/latest/bin/mkl_core.2.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/mkl/latest/bin/mkl_tbb_thread.2.dll" ./build/bin

          cp "${{ env.ONEAPI_ROOT }}/compiler/latest/bin/ur_adapter_level_zero.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/compiler/latest/bin/ur_adapter_opencl.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/compiler/latest/bin/ur_loader.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/compiler/latest/bin/ur_win_proxy_loader.dll" ./build/bin

          cp "${{ env.ONEAPI_ROOT }}/compiler/latest/bin/sycl8.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/compiler/latest/bin/svml_dispmd.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/compiler/latest/bin/libmmd.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/compiler/latest/bin/libiomp5md.dll" ./build/bin

          cp "${{ env.ONEAPI_ROOT }}/dnnl/latest/bin/dnnl.dll" ./build/bin
          cp "${{ env.ONEAPI_ROOT }}/tbb/latest/bin/tbb12.dll" ./build/bin

          echo "cp oneAPI running time dll files to ./build/bin done"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sd-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip
          path: build/bin/
